#Mean and median number of steps taken each day
```{r}
summary(rawdata$steps)
```
We can see that the mean steps per day is 37.38,  and the median is 0 !
#Time series plot of the average number of steps taken per 5 min interval
The folowing graph shows the temporal distribution of data, as the mean steps per 5 min interval
```{r}
steps_time_series <- aggregate(steps ~ interval, mean, data=rawdata,  na.rm=TRUE) #mean steps per minute of 5min interval
plot(steps_time_series$interval, steps_time_series$steps, type="l", main="Average Steps per interval",
xlab="Interval number", ylab="Steps")
```
#The 5-minute interval that, on average, contains the maximum number of steps
Code to describe and show a strategy for imputing missing data
Histogram of the total number of steps taken each day after missing values are imputed
Panel plot comparing the average number of steps taken per 5-minute interval across weekdays and weekends
All of the R code needed to reproduce the results (numbers, plots, etc.) in the report
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
---
title: "Untitled"
author: "Pedro Rebelo"
date: "7 Feb 2016"
output: html_document
---
This is project 1 of Reproducible Research course by Coursera (https://www.coursera.org/learn/reproducible-research)
The objective of this work is to make a Literate Statistical Programming that loads a data set, make some statistical analysis in a human and computer readable form:
# 1-Code for reading in the dataset and/or processing the data
Before we make analysis we must load the data.
```{r}
path_to_file<-"/Users/trashman/activity.csv"
rawdata <- read.csv(path_to_file)
```
# Histogram of the total number of steps taken each day
The data is from an anonymous individual was collected during 2 the months of October and November, 2012 and report the number of steps taken in 5 minute intervals each day. We can see the steps distribution
```{r}
n<-length(rawdata[,1]) ##number of rows
data <- aggregate(steps ~ date, data=rawdata, sum, na.rm = TRUE)
#make histogram with old Sturges Rule
hist(data$steps, breaks=log(n)/log(2)+1, main="Total Steps per Day", xlab="Steps", ylab="Frequency")
```
#Mean and median number of steps taken each day
```{r}
summary(rawdata$steps)
```
We can see that the mean steps per day is 37.38,  and the median is 0 !
#Time series plot of the average number of steps taken per 5 min interval
The folowing graph shows the temporal distribution of data, as the mean steps per 5 min interval
```{r}
steps_time_series <- aggregate(steps ~ interval, mean, data=rawdata,  na.rm=TRUE) #mean steps per minute of 5min interval
plot(steps_time_series$interval, steps_time_series$steps, type="l", main="Average Steps per interval",
xlab="Interval number", ylab="Steps")
```
#The 5-minute interval that, on average, contains the maximum number of steps
Code to describe and show a strategy for imputing missing data
Histogram of the total number of steps taken each day after missing values are imputed
Panel plot comparing the average number of steps taken per 5-minute interval across weekdays and weekends
All of the R code needed to reproduce the results (numbers, plots, etc.) in the report
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
maximum(steps_time_series )
max(steps_time_series )
steps_timeseries[steps_time_series==max(steps_time_series )]
steps_time_series[steps_time_series==max(steps_time_series )]
steps_time_series[2355,]
steps_time_series[2355]
steps_time_series[steps_time_series==2355]
steps_time_series[steps_time_series==2355,]
steps_timeseries[steps_time_series==max(steps_time_series$steps )]
steps_time_series[steps_time_series==max(steps_time_series$steps ),]
steps_time_series[steps_time_series$steps==max(steps_time_series$steps ),]
steps_time_series[steps_time_series$steps==max(steps_time_series$steps ),]$interval
head(steps_time_series)
# The 5-minute interval that, on average, contains the maximum number of steps
The maximum number of mean steps taken in 5 minutes is `r steps_time_series[steps_time_series$steps==max(steps_time_series$steps ),]$steps` and ocuurs at interval number `r steps_time_series[steps_time_series$steps==max(steps_time_series$steps ),]$interval`
par(mfrow=c(2,1))
new_data <- rawdata
new_data$steps[is.na(new_data$steps)] <- median(rawdata$steps, na.rm=TRUE) #put median at NA loci
par(mfrow=c(2,1))
hist(data$steps, breaks=log(n)/log(2)+1, main="Total Steps per Day", xlab="Steps", ylab="Frequency")
steps_time_series <- aggregate(steps ~ interval, mean, data=new_data,  na.rm=TRUE) #mean steps per minute of 5min interval
plot(steps_time_series$interval, steps_time_series$steps, type="l", main="Average Steps per interval",
xlab="Interval number", ylab="Steps")
new_data <- rawdata
new_data$steps[is.na(new_data$steps)] <- median(rawdata$steps, na.rm=TRUE) #put median at NA loci
par(mfrow=c(1,2))
hist(data$steps, breaks=log(n)/log(2)+1, main="Total Steps per Day", xlab="Steps", ylab="Frequency")
steps_time_series <- aggregate(steps ~ interval, mean, data=new_data,  na.rm=TRUE) #mean steps per minute of 5min interval
plot(steps_time_series$interval, steps_time_series$steps, type="l", main=
new_data <- rawdata
new_data$steps[is.na(new_data$steps)] <- median(rawdata$steps, na.rm=TRUE) #put median at NA loci
par(mfrow=c(1,2))
hist(data$steps, breaks=log(n)/log(2)+1, main="Total Steps per Day", xlab="Steps", ylab="Frequency")
steps_time_series <- aggregate(steps ~ interval, mean, data=new_data,  na.rm=TRUE) #mean steps per minute of 5min interval
plot(steps_time_series$interval, steps_time_series$steps, type="l", main="Average Steps per interval",
xlab="Interval number", ylab="Steps")
sum(steps_time_series$steps==NA )
sum(steps_time_series$steps=="NA" )
sum(is.na(rawdata$steps)
)
new_data <- rawdata
new_data$steps[is.na(new_data$steps)] <- median(rawdata$steps, na.rm=TRUE) #put median at NA loci
par(mfrow=c(1,2))
hist(new_data$steps, breaks=log(n)/log(2)+1, main="Total steps per day", xlab="Steps", ylab="Frequency")
steps_time_series <- aggregate(steps ~ interval, mean, data=new_data,  na.rm=TRUE) #mean steps per minute of 5min interval
plot(steps_time_series$interval, steps_time_series$steps, type="l", main="Average steps per interval",
xlab="Interval number", ylab="Steps")
new_data <- rawdata
new_data$steps[is.na(new_data$steps)] <- median(rawdata$steps, na.rm=TRUE) #put median at NA loci
par(mfrow=c(1,2))
n<-length(new_data[,1])
hist(new_data$steps, breaks=log(n)/log(2)+1, main="Total steps per day", xlab="Steps", ylab="Frequency")
steps_time_series <- aggregate(steps ~ interval, mean, data=new_data,  na.rm=TRUE) #mean steps per minute of 5min interval
plot(steps_time_series$interval, steps_time_series$steps, type="l", main="Average steps per interval",
xlab="Interval number", ylab="Steps")
median(rawdata$steps, na.rm=TRUE)
is.na(new_data$steps)
sum(is.na(new_data$steps))
is.na(rawdata$steps)
sum(is.na(rawdata$steps))
new_data <- rawdata
new_data$steps[is.na(rawdata$steps)] <- median(rawdata$steps, na.rm=TRUE) #put median at NA loci
par(mfrow=c(1,2))
n<-length(new_data[,1])
hist(new_data$steps, breaks=log(n)/log(2)+1, main="Total steps per day", xlab="Steps", ylab="Frequency")
steps_time_series <- aggregate(steps ~ interval, mean, data=new_data,  na.rm=TRUE) #mean steps per minute of 5min interval
plot(steps_time_series$interval, steps_time_series$steps, type="l", main="Average steps per interval",
xlab="Interval number", ylab="Steps")
hist(new_data$steps, main="Total steps per day", xlab="Steps", ylab="Frequency")
new_data <- rawdata
new_data$steps[is.na(rawdata$steps)] <- median(rawdata$steps, na.rm=TRUE) #put median at NA loci
par(mfrow=c(1,2))
n<-length(new_data[,1])
hist(new_data$steps, main="Total steps per day", xlab="Steps", ylab="Frequency")
steps_time_series <- aggregate(steps ~ interval, mean, data=new_data,  na.rm=TRUE) #mean steps per minute of 5min interval
plot(steps_time_series$interval, steps_time_series$steps, type="l", main="Average steps per interval",
xlab="Interval number", ylab="Steps")
n<-length(rawdata[,1])
n
summary(new_data$steps)
```{r}
summary(new_data$steps)
summary(rawdata$steps)
new_data <- rawdata
new_data$steps[is.na(rawdata$steps)] <- median(rawdata$steps, na.rm=TRUE) #put median at NA loci
par(mfrow=c(1,2))
data <- aggregate(steps ~ date, data=new_data, sum, na.rm = TRUE)
hist(data$steps, main="Total steps per day", xlab="Steps", ylab="Frequency")
steps_time_series <- aggregate(steps ~ interval, mean, data=new_data,  na.rm=TRUE) #mean steps per minute of 5min interval
plot(steps_time_series$interval, steps_time_series$steps, type="l", main="Average steps per interval",
xlab="Interval number", ylab="Steps")
1/log(2)
log(10)/log(2)
n<-length(rawdata[,1]) ##number of rows
data <- aggregate(steps ~ date, data=rawdata, sum, na.rm = TRUE)
#make histogram with old Sturges Rule
hist(data$steps, breaks=log(n)*log(10)/log(2)+1, main="Total steps per day", xlab="Steps", ylab="Frequency")
log(n)*log(10)/log(2)+1
new_data <- rawdata
new_data$steps[is.na(rawdata$steps)] <- median(rawdata$steps, na.rm=TRUE) #put median at NA loci
par(mfrow=c(1,2))#two graph in same picture
data <- aggregate(steps ~ date, data=new_data, sum, na.rm = TRUE)#number of steps per day
n<-length(rawdata[,1]) #number of rows
k<-log(n)*log(10)/log(2)+1 #Sturges rule for number of bars in a histogram with n observations
hist(data$steps,breaks=k, main="Total steps per day", xlab="Steps", ylab="Frequency")
steps_time_series <- aggregate(steps ~ interval, mean, data=new_data,  na.rm=TRUE) #mean steps per minute of 5min interval
plot(steps_time_series$interval, steps_time_series$steps, type="l", main="Average steps per interval",
xlab="Interval number", ylab="Steps")
new_data$date <- as.Date(new_data$date)
new_data$dayname <- new_data(new_data$date)
new_data$weekend <- as.factor(ifelse(new_data$dayname == "Saturday" |
new_data$dayname == "Sunday", "weekend", "weekday"))
library(lattice)
plotdata <- aggregate(steps ~ interval + weekend, new_data, mean)
xyplot(steps ~ interval | factor(weekend), data=plotdata, aspect=1/3, type="l")
plotdata <- aggregate(steps ~ interval + weekend, new_data, mean)
new_data$date <- as.Date(new_data$date)
new_data$dayname <- new_data(new_data$date)
new_data$date <- as.Date(new_data$date)
new_data$dayname <- new_data(new_data$date)
new_data$dayname <- weekdays(new_data$date)
new_data$weekend <- as.factor(ifelse(new_data$dayname == "Saturday" |
new_data$dayname == "Sunday", "weekend", "weekday"))
library(lattice)
plotdata <- aggregate(steps ~ interval + weekend, new_data, mean)
xyplot(steps ~ interval | factor(weekend), data=plotdata, aspect=1/3, type="l")
hist(steps ~ interval | factor(weekend), data=plotdata, aspect=1/3, type="l")
library(lattice)
plotdata <- aggregate(steps ~ interval + weekend, new_data, mean)
histogram(steps ~ interval | factor(weekend), data=plotdata, aspect=1/3, type="l")
```
bwplot(steps ~ interval | factor(weekend), data=plotdata)
histogram(steps ~ interval | factor(weekend), data=plotdata)
bwplot(steps ~ factor(weekend), data=plotdata)
histogram(steps ~ factor(weekend), data=plotdata)
bwplot(steps ~ factor(weekend), data=plotdata)
plotdata
histogram(steps,data=plotdata$weekend=="weekday")
hist(plotdata[plotdata$weekend=="weekday",]$steps)
hist(plotdata[plotdata$weekend=="weekend",]$steps)
plotdata <- aggregate(steps ~ interval + weekend, new_data, sum)
bwplot(steps ~ factor(weekend), data=plotdata)
hist(plotdata[plotdata$weekend=="weekday",]$steps, ylab="Mean steps",main="Total steps per day")
hist(plotdata[plotdata$weekend=="weekend",]$steps)
hist(plotdata[plotdata$weekend=="weekday",]$steps, xlab="Steps",main="Total steps per day")
plotdata <- aggregate(steps ~ interval + weekend, new_data, sum)
bwplot(steps ~ factor(weekend), data=plotdata)
hist(plotdata[plotdata$weekend=="weekday",]$steps, xlab="Steps",main="Total steps per day in weekday")
hist(plotdata[plotdata$weekend=="weekend",]$steps,xlab="Steps",main="Total steps per day in weekend")
hist(plotdata[plotdata$weekend=="weekday",]$steps, xlab="Steps",main="Total steps per day in weekday")
hist(plotdata[plotdata$weekend=="weekend",]$steps,xlab="Steps",main="Total steps per day in weekend")
library(ggplot2)
plotdata <- aggregate(steps ~ interval + weekend, new_data, sum)
ggplot(plotdata, aes(x=steps)) + geom_histogram()
ggplot(plotdata, aes(x=steps,color=weekend)) + geom_histogram()
ggplot(plotdata, aes(x=steps,color=weekend)) + geom_histogram(fill="white")
ggplot(plotdata, aes(x=steps,color=weekend)) + geom_histogram(fill=weekend)
ggplot(plotdata, aes(x=steps,color=weekend)) + geom_histogram(fill="white")
ggplot(plotdata, aes(x=steps,color=weekend)) + geom_histogram(fill="white")
ggplot(plotdata, aes(x=steps,color=weekend)) + geom_histogram(fill="White")
ggplot(df, aes(x=weight, color=weekend)) +geom_histogram(fill="white", alpha=0.5, position="identity")
ggplot(df, aes(x=weight, color=weekend)) +geom_histogram(fill="white", alpha=0.5)
ggplot(df, aes(x=weight, color=weekend)) +
geom_histogram(fill="white", alpha=0.5)
ggplot(plotdata, aes(x=weight, color=weekend)) +
geom_histogram(fill="white")
ggplot(plotdata, aes(x=steps, color=weekend)) +
geom_histogram(fill="white")
ggplot(plotdata, aes(x=steps,fill=weekend,color=weekend)) + geom_histogram()
data_to_plot <- aggregate(steps ~ interval + weekend, new_data, sum)
hist_plot<-ggplot(data_to_plot, aes(x=steps))+
geom_histogram(color="black", fill="white")+
facet_grid(steps ~ .)
p
hist_plot
hist_plot<-ggplot(data_to_plot, aes(x=steps))+
geom_histogram(color="black", fill="white")+
facet_grid(steps ~ weekday)
hist_plot
hist_plot<-ggplot(data_to_plot, aes(x=steps))+
geom_histogram(color=weekend, fill=weekend,alfa=.5)
hist_plot
hist_plot<-ggplot(data_to_plot, aes(x=steps))+
geom_histogram(color=weekend, fill=weekend,alfa=.5)
ggplot(data_to_plot, aes(x=steps))+
geom_histogram(color=weekend, fill=weekend, alfa=.5)
data_to_plot
ggplot(data_to_plot, aes(x=steps,fill=weekend,color=weekend),alfa=0.5) + geom_histogram()
ggplot(data_to_plot, aes(x=steps,fill=weekend,color=weekend),alfa=0.9) + geom_histogram()
ggplot(data_to_plot, aes(x=steps,fill=weekend,color=weekend),alfa=0.9) + geom_histogram()
ggplot(data_to_plot, aes(x=steps,fill=weekend,color=weekend),alfa=0.9) + geom_histogram() + facet_grid(steps ~ .)
ggplot(data_to_plot, aes(x=steps,fill=weekend,color=weekend),alfa=0.9) + geom_histogram() + facet_grid(steps)
ggplot(data_to_plot, aes(x=steps,fill=weekend,color=weekend),alfa=0.9) + geom_histogram() + facet_grid(weekend)
ggplot(data_to_plot, aes(x=steps,fill=weekend,color=weekend),alfa=0.9) + geom_histogram()
qplot(steps, weekend, data=data_to_plot, geom=c("boxplot", "jitter"),
fill=weekend, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
qplot(steps, weekend, data=data_to_plot, geom=c("boxplot", "jitter"),
fill=weekend, main="Mileage by Gear Number",
xlab="number steps", ylab="Weekday")
qplot(steps, weekend, data=data_to_plot, geom=c("histogram", "jitter"),
fill=weekend, main="Mileage by Gear Number",
xlab="number steps", ylab="Weekday")
qplot(steps, weekend, data=data_to_plot, geom=c("hist", "jitter"),
fill=weekend, main="Mileage by Gear Number",
xlab="number steps", ylab="Weekday")
qplot(steps, weekend, data=data_to_plot, geom=c("density", "jitter"),
fill=weekend, main="Mileage by Gear Number",
xlab="number steps", ylab="Weekday")
# Boxplots of mpg by number of gears
# observations (points) are overlayed and jittered
qplot(steps, weekend, data=data_to_plot, geom=c("boxplot", "jitter"),
fill=weekend, main="Mileage by Gear Number",
xlab="number steps", ylab="Weekday")
View(steps_time_series)
new_data <- rawdata
new_data$steps[is.na(rawdata$steps)] <- median(rawdata$steps, na.rm=TRUE) #put median at NA loci
par(mfrow=c(1,2))#two graph in same picture
data <- aggregate(steps ~ date, data=new_data, sum, na.rm = TRUE)#number of steps per day
n<-length(rawdata[,1]) #number of rows
k<-log(n)*log(10)/log(2)+1 #Sturges rule for number of bars in a histogram with n observations
hist(new_data$steps,breaks=k, main="Total steps per day", xlab="Steps", ylab="Frequency")
steps_time_series <- aggregate(steps ~ interval, mean, data=new_data,  na.rm=TRUE) #mean steps per minute of 5min interval
plot(steps_time_series$interval, steps_time_series$steps, type="l", main="Average steps per interval",
xlab="Interval number", ylab="Steps")
hist(data$steps,breaks=k, main="Total steps per day", xlab="Steps", ylab="Frequency")
steps_time_series <- aggregate(steps ~ interval, mean, data=new_data,  na.rm=TRUE) #mean steps per minute of 5min interval
plot(steps_time_series$interval, steps_time_series$steps, type="l", main="Average steps per interval",
xlab="Interval number", ylab="Steps")
data_to_plot <- aggregate(steps ~ interval + weekend, new_data, mean)
new_data$date <- as.Date(new_data$date)
new_data$dayname <- weekdays(new_data$date)
new_data$weekend <- as.factor(ifelse(new_data$dayname == "Saturday" |
new_data$dayname == "Sunday", "weekend", "weekday"))
library(ggplot2)
data_to_plot <- aggregate(steps ~ interval + weekend, new_data, mean)
# Boxplots of mpg by number of gears
# observations (points) are overlayed and jittered
qplot(steps, weekend, data=data_to_plot, geom=c("boxplot", "jitter"),
fill=weekend, main="Mileage by Gear Number",
xlab="number steps", ylab="Weekday")
qplot(steps, weekend, data=data_to_plot, geom=c("boxplot", "jitter"),
fill=weekend, main="Number of steps per day",
xlab="number steps", ylab="Weekday")
new_data <- rawdata
new_data$steps[is.na(rawdata$steps)] <- median(rawdata$steps, na.rm=TRUE) #put median at NA loci
par(mfrow=c(1,2))#two graph in same picture
data <- aggregate(steps ~ date, data=new_data, sum, na.rm = TRUE)#number of steps per day
n<-length(rawdata[,1]) #number of rows
k<-log(n)*log(10)/log(2)+1 #Sturges rule for number of bars in a histogram with n observations
hist(data$steps,breaks=k, main="Total steps per day", xlab="Steps", ylab="Frequency")
steps_time_series <- aggregate(steps ~ interval, mean, data=new_data,  na.rm=TRUE) #mean steps per minute of 5min interval
plot(steps_time_series$interval, steps_time_series$steps, type="l", main="Average steps per interval",
xlab="Interval number", ylab="Steps")
# Boxplots of weekend
# observations (points) are overlayed and jittered
qplot(steps, weekend, data=data_to_plot, geom=c("boxplot", "jitter"),
fill=weekend, main="Number of steps per day",
xlab="number steps", ylab="Weekday")
qplot(steps, weekend, data=data_to_plot, geom=c("boxplot", "jitter"),
fill=weekend, main="Mean number of steps im 5 min by type of day ",
xlab="number steps", ylab="Weekday")
2.8*1.4
300*1.4
300*2
f/5.6
cos(2*pi/3)
6/8*20
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
new_data$date <- as.Date(new_data$date)new_data$dayname <- weekdays(new_data$date)new_data$week <- as.factor(ifelse(new_data$dayname == "Saturday" | new_data$dayname == "Sunday", "weekend", "weekday"))library(ggplot2)data_to_plot <- aggregate(steps ~ interval + week, new_data, mean)# Boxplots of weekend# observations (points) are overplayed and jitteredqplot(steps, week, data=data_to_plot, geom=c("boxplot", "jitter"),    fill=weekend, main="Mean number of steps in 5 min by type of day ",   xlab="number steps", ylab="Weekday")
new_data$date <- as.Date(new_data$date)new_data$dayname <- weekdays(new_data$date)
new_data$date <- as.Date(new_data$date)new_data$dayname <- weekdays(new_data$date)
new_data$date <- as.Date(new_data$date)
new_data$dayname <- weekdays(new_data$date)
new_data$weekend <- as.factor(ifelse(new_data$day == "Saturday" | new_data$dayname == "Sunday", "weekend", "weekday"))
new_data$weekend
new_data$date <- as.Date(new_data$date)new_data$dayname <- weekdays(new_data$date)new_data$week_day <- as.factor(ifelse(new_data$day == "Saturday" | new_data$dayname == "Sunday", "weekend", "weekday"))library(ggplot2)data_to_plot <- aggregate(steps ~ interval + week_day, new_data, mean)
new_data$date <- as.Date(new_data$date)
new_data$dayname <- weekdays(new_data$date)
new_data$week_day <- as.factor(ifelse(new_data$day == "Saturday" | new_data$dayname == "Sunday", "weekend", "weekday"))
library(ggplot2)
data_to_plot <- aggregate(steps ~ interval + week_day, new_data, mean)
# Boxplots of weekend
# observations (points) are overplayed and jittered
qplot(steps, weekend, data=data_to_plot, geom=c("boxplot", "jitter"),
fill=weekend, main="Mean number of steps in 5 min by type of day ",
xlab="number steps", ylab="Weekday")
```
qplot(steps, week_day, data=data_to_plot, geom=c("boxplot", "jitter"),
fill=weekend, main="Mean number of steps in 5 min by type of day ",
xlab="number steps", ylab="Weekday")
```
qplot(steps, week_day, data=data_to_plot, geom=c("boxplot", "jitter"),    fill=week_day, main="Mean number of steps in 5 min by type of day ",   xlab="number steps", ylab="Weekday")
new_data$date <- as.Date(new_data$date)new_data$dayname <- weekdays(new_data$date)new_data$week_day <- as.factor(ifelse(new_data$day == "Saturday" | new_data$dayname == "Sunday", "weekend", "weekday"))library(ggplot2)data_to_plot <- aggregate(steps ~ interval + week_day, new_data, mean)ggplot(data_to_plot, aes(interval, steps)) + geom_line() + facet_grid(week_day ~ .) +    xlab("5-minute interval") + ylab("Number of steps")
new_data$date <- as.Date(new_data$date)
new_data$dayname <- weekdays(new_data$date)
new_data$week_day <- as.factor(ifelse(new_data$day == "Saturday" | new_data$dayname == "Sunday", "weekend", "weekday"))
library(ggplot2)
data_to_plot <- aggregate(steps ~ interval + week_day, new_data, mean)
ggplot(data_to_plot, aes(interval, steps)) + geom_line() + facet_grid(week_day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
```
setwd("/Users/pedrorebelo/RepData_PeerAssessment1")#path to directory where data is
unzip("activity.zip")
dados <- read.csv("activity.csv")
setwd("/Users/trashman/RepData_PeerAssessment1")#path to directory where data is
unzip("activity.zip")
dados <- read.csv("activity.csv")
setwd("/Users/trashman/Documents/RepData_PeerAssessment1")#path to directory where data is
unzip("activity.zip")
dados <- read.csv("activity.csv")
passos_por_dia <- aggregate(dados[,"steps"],by=as.list(dados["date"]),FUN=sum,na.rm=TRUE)
names(passos_por_dia) <- c("date","steps")
media<-round(mean(passos_por_dia$steps)) #integer number of steps
mediana<-median(passos_por_dia$steps)
```
The general distribution is given by the hystogram:
```{r}
hist(passos_por_dia$steps,breaks=round(log2(dim(passos_por_dia)[1])+1), #Sturges rule
xlab="number of steps",
main="Total number of steps per day")
hist(passos_por_dia$steps,breaks=round(log2(dim(passos_por_dia)[2])+1), #Sturges rule
xlab="number of steps",
main="Total number of steps per day")
dim(passos_por_dia)[1]
steps_time_series <- aggregate(steps ~ interval, mean, data=rawdata,  na.rm=TRUE) #mean steps per minute of 5min intervalplot(steps_time_series$interval, steps_time_series$steps, type="l", main="Average steps per interval",     xlab="Interval number", ylab="Number of steps")
steps_time_series <- aggregate(steps ~ interval, mean, data=rawdata,  na.rm=TRUE) #mean steps per minute of 5min intervalplot(steps_time_series$interval, steps_time_series$steps, type="l", main="Average steps per interval",     xlab="Interval number", ylab="Number of steps")
24*60
n<-length(rawdata[,1]) ##number of rowsdata <- aggregate(steps ~ date, data=rawdata, sum, na.rm = TRUE)#make histogram with old Sturges Rule hist(data$steps, breaks=log(n)*log(10)/log(2)+1, main="Total steps per day", xlab="Steps", ylab="Frequency")
n<-length(rawdata[,1]) ##number of rowsdata <- aggregate(steps ~ date, data=rawdata, sum, na.rm = TRUE)#make histogram with old Sturges Rule hist(data$steps, breaks=log(n)*log(10)/log(2)+1, main="Total steps per day", xlab="Steps", ylab="Frequency")
n<-length(rawdata[,1]) ##number of rowsdata <- aggregate(steps ~ date, data=rawdata, sum, na.rm = TRUE)#make histogram with old Sturges Rule hist(data$steps, breaks=log(n)*log(10)/log(2)+1, main="Total steps per day", xlab="Steps", ylab="Frequency")
hist(data$steps, breaks=log(n)*log(10)/log(2)+1, main="Total steps per day", xlab="Steps", ylab="Frequency")
2750/5
2750/5
2750/60
550/12
2750*5/60
229/24
hist(passos_por_dia$steps,breaks=round(log2(dim(passos_por_dia)[1])+1), #Sturges rule
xlab="number of steps",
main="Total number of steps per day")
plot(passos_por_5_min, type = "l",
xlab="Interval Number",
ylab="Number of steps",
main="Daily 5 min average steps")
passos_por_5_min <- aggregate(dados[,"steps"],by = as.list(dados["interval"]),
FUN = mean, na.rm=TRUE)
plot(passos_por_5_min, type = "l",
xlab="Interval Number",
ylab="Number of steps",
main="Daily 5 min average steps")
```
dados_martelados<-dados
dados_martelados$steps[is.na(dados$steps)]<-0
summary(dados$steps)
summary(dados_martelados$steps)
n_passos_por_dia <- aggregate(dados_martelados[,"steps"],by=as.list(dados_martelados["date"]),FUN=sum,na.rm=TRUE)
names(n_passos_por_dia) <- c("date","steps")
n_media<-round(mean(n_passos_por_dia$steps)) #integer number of steps
n_mediana<-median(n_passos_por_dia$steps)
hist(passos_por_dia$steps,breaks=round(log2(dim(n_passos_por_dia)[1])+1), #Sturges rule
xlab="number of steps",
main="Total number of steps per day")
n_passos_por_dia <- aggregate(dados_martelados[,"steps"],by=as.list(dados_martelados["date"]),FUN=sum,na.rm=TRUE)
names(n_passos_por_dia) <- c("date","steps")
n_media<-round(mean(n_passos_por_dia$steps)) #integer number of steps
n_mediana<-median(n_passos_por_dia$steps)
hist(passos_por_dia$steps,xlab="number of steps",
main="Total number of steps per day")
n_passos_por_dia <- aggregate(dados_martelados[,"steps"],by=as.list(dados_martelados["date"]),FUN=sum,na.rm=TRUE)
names(n_passos_por_dia) <- c("date","steps")
n_media<-round(mean(n_passos_por_dia$steps)) #integer number of steps
n_mediana<-median(n_passos_por_dia$steps)
hist(passos_por_dia$steps,xlab="number of steps",
main="Total number of steps per day")
n_passos_por_dia
n_mediana<-int(median(n_passos_por_dia$steps))#integer nº of steps
n_mediana<-round(median(n_passos_por_dia$steps))#integer nº of steps
n_mediana
hist(passos_por_dia$steps,breaks=round(log2(dim(passos_por_dia)[1])+1), #Sturges rule
xlab="number of steps",
main="Total number of steps per day")
passos_por_5_min <- aggregate(dados[,"steps"],by = as.list(dados["interval"]),
FUN = mean, na.rm=TRUE)
plot(passos_por_5_min, type = "l",
xlab="Interval Number",
ylab="Number of steps",
main="Daily 5 min average steps")
n_passos_por_dia <- aggregate(dados_martelados[,"steps"],by=as.list(dados_martelados["date"]),FUN=sum,na.rm=TRUE)
names(n_passos_por_dia) <- c("date","steps")
hist(passos_por_dia$steps,xlab="number of steps",
main="Total number of steps per day")
library(ggplot2)
graph <- ggplot(steps_wd,aes(interval,x))+ theme_bw()
graph <- graph + geom_line() + facet_wrap(~ wd, nrow = 2)
graph <- graph + xlab("Interval (min)")
graph <- graph + ylab("number of steps")
graph
wd <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {
"weekend"
} else {
"weekday"
}
}
dados$wd <- as.factor(sapply(dados$date, wd))
#calculate the 5 min mean by wd
steps_wd<-aggregate(dados[,"steps"],by=as.list(c(dados["wd"],dados["interval"])), FUN=mean,na.rm=TRUE)
#create a ggplot
library(ggplot2)
graph <- ggplot(steps_wd,aes(interval,x))+ theme_bw()
graph <- graph + geom_line() + facet_wrap(~ wd, nrow = 2)
graph <- graph + xlab("Interval (min)")
graph <- graph + ylab("number of steps")
graph
wd <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {
"weekend"
} else {
"weekday"
}
}
dados$wd <- as.factor(sapply(dados$date, wd))
#calculate the 5 min mean by wd
steps_wd<-aggregate(dados[,"steps"],by=as.list(c(dados["wd"],dados["interval"])), FUN=mean,na.rm=TRUE)
#create a ggplot
library(ggplot2)
graph <- ggplot(steps_wd,aes(interval,x))+ theme_bw()
graph <- graph + geom_line() + facet_wrap(~ wd, nrow = 2)
graph <- graph + xlab("Interval number")
graph <- graph + ylab("Number of steps")
graph
24*60
24*60*2
2750*5
2750*5/60
